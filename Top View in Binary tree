#include <iostream>
#include <map>
#include <queue>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};


struct QueueNode {
    TreeNode* node;
    int hd;
    QueueNode(TreeNode* n, int h) : node(n), hd(h) {}
};

void topView(TreeNode* root) {
    if (root == nullptr)
        return;
    map<int, int> m;

  
    queue<QueueNode> q;
    q.push(QueueNode(root, 0));

    while (!q.empty()) {
        QueueNode curr = q.front();
        q.pop();
        TreeNode* node = curr.node;
        int hd = curr.hd;
        if (m.find(hd) == m.end()) {
            m[hd] = node->val;
        }

        // Enqueue left and right children with updated horizontal distance
        if (node->left) {
            q.push(QueueNode(node->left, hd - 1));
        }
        if (node->right) {
            q.push(QueueNode(node->right, hd + 1));
        }
    }

    // Print nodes in the map
    for (auto it = m.begin(); it != m.end(); it++) {
        cout << it->second << " ";
    }
    cout << endl;
}

int main() {
   
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(4);
    root->left->right->right = new TreeNode(5);
    root->left->right->right->right = new TreeNode(6);


    topView(root);

    return 0;
}
